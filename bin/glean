#!/usr/bin/env ruby
require 'gli'
require 'glean'
require 'base64'

include GLI::App

program_desc 'A data management tool for humans'

version Glean::VERSION

desc 'Download a dataset by name'
arg_name "<dataset> [<path>]"
command :get do |c|
  c.action do |global_options,options,args|
    dataset = Glean::Dataset.new(args[0])
  end
end

desc 'Export a dataset'
arg_name '<dataset>'
command :export do |c|
  c.desc 'Set the export format'
  c.default_value "json"
  c.flag [:f,:format], :type => String, :must_match => Glean::Formatter.available_formatters
  c.action do |global_options,options,args|
    dataset = Glean::Dataset.new(args[0])
    dataset.each do |datum|
      formatter = Glean::Formatter.format(options[:format])
      puts formatter.format(datum)
    end
  end
end

desc 'Show dataset information'
arg_name '<dataset>'
command :info do |c|
  c.action do |global_options,options,args|
    identifier = Glean::Source.resolve_identifier(args[0])
    puts Glean::Source.info(identifier)
  end
end

desc 'Search for datasets'
arg_name '<query>'
command :search do |c|
  c.switch :contrib
  c.action do |global_options,options,args|
    source = options[:contrib] ? :contrib : :core
    Glean::Source.search(args[0], source).each do |datasource|
      puts "#{datasource.name} -- #{datasource.description}"
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
